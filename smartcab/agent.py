import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ### Setting additional parameters
        
        self.testing = False    # flag used to check for testing trial
        self.initialQ = 0.0     # initialization value for new entries in the Q-table
        self.timer = 0          # timer counter increments by 1 at every time step
        self.a = 0.9          # used for epsilon decay factor : a^t


    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ###########
        self.testing = testing
        
        if testing:             # epsilon and alpha set to 0 during testing
            self.epsilon = 0.0
            self.alpha = 0.0
        else:
            self.epsilon = self.a ** self.timer # epsilon update
            #self.epsilon -= 0.05
            
            self.timer += 1
        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ########### 
        
        # Set 'state' as a tuple of relevant data for the agent        
        state = (waypoint, inputs['light'], inputs['oncoming'], inputs['left'])

        return state


    def get_maxQ(self, state):
        """ The get_maxQ function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """
            
        ### I am not only calculating and returning the maxQ value in this function,
        ### but I'm also pairing the value with the action corresponding to it, 
        ### packed together as a labeled pair in a dictionary
        
        # find the action with maximum Q-value with tie breaker implementation
        action = random.choice([action for action in self.Q[state].keys() if self.Q[state][action] == max(self.Q[state].values())])
        value = self.Q[state][action]                                 # maximum Q-value for the state over all actions
        maxQ = {'action':action, 'value':value}
            
        return maxQ     # returns a dictionary of labeled pair containing the action for maxQ and maxQ value


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        
        if self.learning :      # Checking for state and creating entry in Q table during learning
            initialQ = self.initialQ
            if state not in self.Q :
                self.Q[state] = {None:initialQ, 'forward':initialQ, 'left':initialQ, 'right':initialQ}

        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        
        ########### 
        
        randomAction = random.choice(self.valid_actions)
        
        if self.learning : 
            # Since get_maxQ() function randomly selects among actions if more than one action have values equal to maxQ of a state,
            # We can be sure that when choosing an action with highest Q-value that we randomly select between actions that tie
            maxQAction = self.get_maxQ(state)['action']
            
            if self.testing :
                action = maxQAction     # Selecting best learnt action during testing
            else :
                # probabilistically choosing between action for maxQ and random action during training
                action = maxQAction if random.randint(1,100) <= 100*(1-self.epsilon) else randomAction
        else :
            action = randomAction     # selecting random action whene learning is disabled
        
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives a reward. This function does not consider future rewards 
            when conducting learning. """

        ########### 
        # Using only the learning rate 'alpha' (Not using the discount factor 'gamma')
    
        # Since we are not using gamma, I am assuming we are setting gamma = 0 !
        # Therefore, the update rule doesn't have maxQ(of-next-state) term added to the reward !
        
        if self.learning :      # updating Q function when learning
            self.Q[state][action] = (1-self.alpha) * self.Q[state][action] + self.alpha * (reward)

        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward                
        self.learn(state, action, reward)   # Q-learn
    
        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=True, epsilon = 1.0, alpha = 0.5)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay=0.0, display=False, log_metrics=True, optimized=True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=10)


if __name__ == '__main__':
    run()
